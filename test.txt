mot :: Nat -> U.
mot = λ(x) Nat.

step :: Nat -> Nat -> Nat.
step = λ(cur) λ(last) Succ last.

plus :: Nat -> Nat -> Nat.
plus = λ(left) λ(right) (IndNat left mot right step).

x :: Nat.
x = plus (Succ Zero) (Succ (Succ Zero)).

idty :: U.
idty = Π(ty:U) ty -> ty.

id :: idty.
id = λ(ty) λ(x) x.

id === id idty id : idty.

nNat :: U.
nZero :: nNat.
nSucc :: nNat -> nNat.

two :: nNat.
two = nSucc (nSucc nZero).

one :: nNat.
one = nSucc nZero.

two === (nSucc one) : nNat.

List :: U -> U.
nil :: Π(ty:U) (List ty).
cons :: Π(ty:U) ty -> List ty -> List ty.

empty :: List Nat.
empty = nil Nat.

push :: List Nat -> Nat -> List Nat.
push = λ(xs) λ(x) cons Nat x xs.

list_example :: List Nat.
list_example = push empty Zero.