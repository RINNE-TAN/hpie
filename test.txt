cN :: U.
cN = Π(X:U) (X -> X) -> X -> X.

cZ :: cN.
cZ = λ(X) λ(s) λ(z) z.

cS :: cN -> cN.
cS = λ(x) λ(X) λ(s) λ(z) s (x X s z).

cNInd :: cN -> U.
cNInd = λ(x) Π(P:cN -> U)
    (Π(x:cN) P x -> P (cS x)) -> (P cZ)
    -> P x.

N :: U.
N = Σ(x:cN) cNInd x.

Z :: N.
Z = (
    cZ, 
    λ(p) λ(pcS) λ(pcZ) pcZ
).

S :: N -> N.
S = λ(x) (
    cS (First x), 
    λ(p) λ(pcS) λ(pcZ) 
        pcS (First x) ((Second x) p pcS pcZ) 
).

cVec :: N -> U -> U.
cVec = λ(n) λ(A) Π(L:U) (A -> L -> L) -> L -> L.

cNil :: Π(A:U) cVec Z A.
cNil = λ(A) λ(L) λ(cons) λ(nil) nil.

cCons :: Π(n:N) Π(A:U) A -> cVec n A -> cVec (S n) A. 
cCons = λ(n) λ(A) λ(x) λ(xs) 
            λ(L) λ(cons) λ(nil)
                cons x (xs L cons nil)
.
cVecInd :: Π(n:N) Π(A:U) cVec n A -> U.
cVecInd = λ(n) λ(A) λ(vecs) 
            Π(P:Π(n:N) cVec n A -> U)
                (
                    Π(n:N) Π(x:A) Π(xs:cVec n A) 
                        P n xs -> P (S n) (cCons n A x xs)
                ) ->  (P Z (cNil A)) 
                    ->  P n vecs
.

Vec :: N -> U -> U.
Vec = λ(n) λ(A) Σ(x:cVec n A) cVecInd n A x.

Nil :: Π(A:U) Vec Z A.
Nil = λ(A) (cNil A, λ(p) λ(pcons) λ(pnil) pnil).

Cons :: Π(n:N) Π(A:U) A -> Vec n A -> Vec (S n) A.
Cons = λ(n) λ(A) λ(x) λ(xs)
            (
                cCons n A x (First xs),
                λ(p) λ(pcons) λ(pnil) 
                    pcons n x (First xs) ((Second xs) p pcons pnil)
            )
.

plusMot :: cN -> U.
plusMot = λ(n) N.

plusStep :: Π(x:cN) N -> N.
plusStep = λ(x) λ(n) S n.

plus :: N -> N -> N.
plus = λ(left) λ(right)
        (Second left) plusMot plusStep right
.

sumMot :: Π(n:N) cVec n N -> U.
sumMot = λ(n) λ(xs) N.

sumStep :: Π(n:N) Π(x:N) Π(xs:cVec n N) 
                        N -> N.
sumStep = λ(n) λ(x) λ(xs) 
            λ(last) plus last x.

sum :: Π(n:N) Vec n N -> N.
sum = λ(n) λ(vecs) (Second vecs) sumMot sumStep Z.

push :: Π(n:N) Vec n N -> Vec (S n) N.
push = λ(n) λ(xs) Cons n N n xs. 

empty :: Vec Z N.
empty = Nil N.

Vec1 :: Vec (S Z) N.
Vec1 = push Z empty.

Vec2 :: Vec (S (S Z)) N.
Vec2 = push (S Z) Vec1.

Vec3 :: Vec (S (S (S Z))) N.
Vec3 = push (S (S Z)) Vec2.

Vec4 :: Vec (S (S (S (S Z)))) N.
Vec4 = push (S (S (S Z))) Vec3.

S (S (S (S (S Z)))) === plus (S (S (S Z))) (S (S Z)) : N.
sum (S (S (S (S Z)))) Vec4 === (S (S (S (S (S (S Z)))))) : N.

trivial :: Trivial.
trivial = Sole.
absurd :: Absurd -> Trivial.
absurd = λ(a) IndAbsurd a Trivial.
