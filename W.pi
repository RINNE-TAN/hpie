data N where
  | Z
  | S (N)
.

data Eq (A : U) (a : A) (b : A) where
  | Refl [a = b]
.

sym : [A : U] => [x : A] => [y : A] => Eq A x y -> Eq A y x.
sym = \A x y pf.case pf of
  | Refl -> Refl
.

trans : [A : U] => [x : A] => [y : A] => [z : A] => (Eq A x z) -> (Eq A z y) -> (Eq A x y).
trans = \A x y z pf1 pf2 . 
  case pf2 of 
  | Refl -> pf1 
.