data N where
  | Z
  | S (N)
.

data Eq (A : U) (a : A) (b : A) where
  | Refl [a = b]
.

sym : [A : U] => [x : A] => [y : A] => Eq A x y -> Eq A y x.
sym = \A x y pf.
  case pf of
    | Refl -> Refl
.

trans : [A : U] => [x : A] => [y : A] => [z : A] => (Eq A x z) -> (Eq A z y) -> (Eq A x y).
trans = \A x y z pf1 pf2. 
  case pf2 of 
    | Refl -> pf1 
.

cong : [A : U] => [B : U] => [f : A -> B] => [x : A] => [y : A] => (Eq A x y) -> (Eq B (f x) (f y)).
cong = \A B f x y pf.
  case pf of 
    | Refl -> Refl
.

ind_N : [p : N -> U] => (p Z) -> ([n : N] => (p n) -> p (S n)) -> ([n : N] => p n).
ind_N = \k pZ pS.
  \n.
  case n of 
    | Z -> pZ
    | S m -> pS m ((ind_N k pZ pS) m)
. 

plus : N -> N -> N.
plus = \l r. 
  case l of
    | Z -> r
    | S n -> S (plus n r)
.

plus_Z_sym : [x : N] => Eq N (plus Z x) (plus x Z).
plus_Z_sym = \x.ind_N
  (\n.Eq N (plus Z n) (plus n Z))
  (Refl)
  (\n pf.
    cong N N (\n.S n) 
      (n)
      (plus n Z)
      pf
  )
  (x)
.

plus_sym : [x : N] => [y : N] => Eq N (plus x y) (plus y x).
plus_sym = \x.ind_N
  (\n.[y : N] => Eq N (plus n y) (plus y n))
  (plus_Z_sym)
  (\m pfx.\y.ind_N
    (\t.Eq N (plus (S m) t) (plus t (S m)))
    (sym N 
      (plus Z (S m))
      (plus (S m) Z)
      (plus_Z_sym (S m))
    )
    (\k pfy.cong N N(\n.S n)
      (plus m (S k))
      (plus k (S m))
      (trans N 
        (plus m (S k))
        (plus k (S m))
        (S (plus k m))
        (pfx (S k))
        (trans N
          (S (plus k m))
          (plus k (S m))
          (plus (S m) k)
          (cong N N (\n.S n)
            (plus k m)
            (plus m k)
            (sym N 
              (plus m k)
              (plus k m)
              (pfx k)
            )
          )
          (pfy)
        )
      ) 
    )
    (y)
  )
  (x)
.