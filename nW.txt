PN :: Bool -> U.
PN = λ(b) IndBool b (λ(b) U) Absurd Trivial.

N :: U.
N = W Bool PN.

Z :: N.
Z = Sup False (λ(absurd) IndAbsurd absurd N).

S :: N -> N.
S = λ(n) Sup True (λ(trivial) n).

plusMot :: N -> U.
plusMot = λ(n) N.

plus :: N -> N -> N.
plus = λ(left) λ(right)
        IndW left plusMot (
            λ(s) λ(f) IndBool s (λ(s) (PN s -> N) -> N)
                (λ(z) right)
                (λ(s) S(s Sole))
        )
.

plus (S Z) (S Z) === S (S Z) : N.

PList :: Π(A:U) Either Trivial A -> U.
PList = λ(A) λ(e) IndEither e (λ(e) U) (λ(l) Absurd) (λ(r) Trivial).

List :: U -> U.
List = λ(A) W (Either Trivial A) (PList A).

Nil :: Π(A:U) List A.
Nil = λ(A) 
        Sup (Inl Sole) (λ(absurd) IndAbsurd absurd (List A)).

Cons :: Π(A:U) A -> List A -> List A.
Cons = λ(A) λ(x) λ(xs) 
        Sup (Inr x) (λ(trivial) xs).

lensMot :: Π(A:U) List A -> U.
lensMot = λ(A) λ(list) N.

lens :: Π(A:U) List A -> N.
lens = λ(A) λ(list) 
        IndW list (lensMot A) (
            λ(s) λ(f) IndEither s (λ(s) (PList A s -> N) -> N)
                (λ(l) λ(nil) Z)
                (λ(r) λ(cons) S(cons Sole))
        )
.

lens N (Nil N) === Z : N.
lens N (Cons N Z (Nil N)) === S Z : N.
lens N (Cons N Z (Cons N Z (Nil N))) === S(S Z) : N.

sum :: List N -> N.
sum = λ(list) 
        IndW list (lensMot N) (
            λ(s) λ(f) IndEither s (λ(s) (PList N s -> N) -> N)
                (λ(l) λ(nil) Z)
                (λ(r) λ(cons) plus r (cons Sole))
        )
.

sum (Nil N) === Z : N.
sum (Cons N (S Z) (Nil N)) === S Z : N.
sum (Cons N (S (S Z)) (Cons N (S Z) (Nil N))) === S (S (S Z)) : N.